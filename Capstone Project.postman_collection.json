{
	"info": {
		"_postman_id": "09ccfabd-0223-43fc-97c6-13d1eb6c61c4",
		"name": "Capstone Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Casting Assistant",
			"item": [
				{
					"name": "GET movies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET actors",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH movie - Role Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const schema = {\r",
									"    \"error\": {\"type\": \"integer\"}, \r",
									"    \"message\": \r",
									"    {\r",
									"        \"code\": {\"type\": \"string\"}, \r",
									"        \"description\": {\"type\": \"string\"}\r",
									"    }, \r",
									"    \"success\": {\"type\": \"boolean\"}\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function(){\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test('Error message', function(){\r",
									"    pm.expect(jsonData.message[\"description\"]).to.eql(\"Permission not found. - method not allowed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"release_date\": \"2019.10.03\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors/{{actor_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"{{actor_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlBfVnJpcDNjMl91R093UVluQkp0SSJ9.eyJpc3MiOiJodHRwczovL2hvbGVjc2thLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MDM2YTEwYjg1MzY3NTAwNmZkZTZlOGIiLCJhdWQiOiJjYXBzdG9uZV9pZGVudGlmaWVyIiwiaWF0IjoxNjE1MDU2MTUwLCJleHAiOjE2MTUwNjMzNTAsImF6cCI6InFoREpWNzBzdlZjTm5qUmtIVVV0eHFPRHlGcXoxbFRKIiwic2NvcGUiOiIiLCJwZXJtaXNzaW9ucyI6WyJnZXQ6ZWxlbWVudHMiXX0.KE2CYea8Qu79Z9tSb0e8jeMBmp-kttHxPhY0rEpXc_5i6Bla3k8fXADV_B_fY2n5wAQy8aemxHuvwqCUopP7IT8etXZH_bw4R0s-lWvZ149GjnEzUhBNBwjf-NTPIwqyofZLAzKEXPs3f82DEihXBVQHmZ2uLAzVodz7UpThe-2gwbbRMeeitRJpeMJAUp9Tvc3wkkd05CcbM0GEkJ1ujSyZInJy1ZLQGPUDp9qieb0oQcIs3YhgzO4E0OqEkWReKMVB-3pfN492NjwZsnm6vIKCS2D93CT3PF0Y0gUC3zP8Cl2UlSU5t1x9bDX6WEfZRBqo5SGE0DICM-5PHG4a3g",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Casting Director",
			"item": [
				{
					"name": "POST actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const schema = {\r",
									"    \"actor\": \r",
									"        {\r",
									"            \"id\": {\"type\": \"integer\"},\r",
									"            \"name\": {\"type\": \"string\"},\r",
									"            \"age\": {\"type\": \"integer\"},\r",
									"            \"gender\": {\"type\": \"string\"}\r",
									"        },\r",
									"    \"success\": {\"type\": \"boolean\"}\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function(){\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"const id_curent = jsonData.actor.id;\r",
									"pm.collectionVariables.set(\"actor_id\", id_curent );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Joaquin Phoenix\", \r\n    \"age\": \"46\", \r\n    \"gender\": \"men\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test an Attribute Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"  pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"The response has all properties\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.eql(\"You are trying to modify an attribute which does not exist\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title_test\": \"New Film\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:5000/actors/{{actor_id}}",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"actors",
								"{{actor_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH an ACTOR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const schema = {\r",
									"    \"success\": {\"type\": \"boolean\"}, \r",
									"    \"changed_actor\": {\"type\": \"integer\"}\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function(){\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age\": \"47\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors/{{actor_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"{{actor_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const schema = {\r",
									"    \"success\": {\"type\": \"boolean\"}, \r",
									"    \"deleted_actor\": {\"type\": \"integer\"}\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function(){\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/actors/{{actor_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"actors",
								"{{actor_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST movie - Role Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const schema = {\r",
									"    \"error\": {\"type\": \"integer\"}, \r",
									"    \"message\": \r",
									"    {\r",
									"        \"code\": {\"type\": \"string\"}, \r",
									"        \"description\": {\"type\": \"string\"}\r",
									"    }, \r",
									"    \"success\": {\"type\": \"boolean\"}\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function(){\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test('Error message', function(){\r",
									"    pm.expect(jsonData.message[\"code\"]).to.eql(\"forbidden\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Joker - Test\",\r\n    \"release_date\": \"2018\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlBfVnJpcDNjMl91R093UVluQkp0SSJ9.eyJpc3MiOiJodHRwczovL2hvbGVjc2thLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MDM5NDZkYjUwMTg1ZDAwNjgyMWVmMzEiLCJhdWQiOiJjYXBzdG9uZV9pZGVudGlmaWVyIiwiaWF0IjoxNjE1MDYxNDk2LCJleHAiOjE2MTUwNjg2OTYsImF6cCI6InFoREpWNzBzdlZjTm5qUmtIVVV0eHFPRHlGcXoxbFRKIiwic2NvcGUiOiIiLCJwZXJtaXNzaW9ucyI6WyJkZWxldGU6YWN0b3JzIiwiZ2V0OmVsZW1lbnRzIiwicGF0Y2g6YWN0b3JzIiwicGF0Y2g6bW92aWVzIiwicG9zdDphY3RvcnMiXX0.D7HKlbzm0EMQwSpPuJmOySqvphpcHz1t_eHi6dMHRPs4RET2beFy2LL45zafdhBmR-eeAdY4E2Jbtfsw6E9tTrYQjChkBqgZ86mbmivFWeLgcqoB6EQGZ9kHp-RobV60kDRB6MXtPUXf-etol5WdYBm3vGjSr-Pd7dC4usFIijSr2LCgXynJuLEXf_m_whnDWMgYGrzqiRCq2pYw75GL_wiNBtDaaOEv7vKJMbwQef8tR6XSHsKOeNUpGWK8QRKXkksotQ4wSrLVOHs_LlAI3Gu4z4sDRHYTrUWmPJ5AaDRuf8TobuIVxTX14uszPVc-16S_3BDKkmwkba5Pq-i1cQ",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Executive Producer",
			"item": [
				{
					"name": "POST movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const schema = {\r",
									"    \"movie\": \r",
									"    {\r",
									"        \"title\": {\"type\": \"string\"}, \r",
									"        \"release_date\": {\"type\": \"date\"}\r",
									"    },\r",
									"    \"success\": {\"type\": \"boolean\"}\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function(){\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"const id_curent = jsonData.movie.id;\r",
									"pm.collectionVariables.set(\"movie_id\", id_curent );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Joker\",\r\n    \"release_date\": \"2019.10.03\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const schema = {\r",
									"    \"success\": {\"type\": \"boolean\"}, \r",
									"    \"changed_movie\": {\"type\": \"integer\"}\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function(){\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"release_date\": \"2019.10.17\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/movies/{{movie_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies",
								"{{movie_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const schema = {\r",
									"    \"success\": {\"type\": \"boolean\"}, \r",
									"    \"deleted_movie\": {\"type\": \"integer\"}\r",
									"};\r",
									"\r",
									"pm.test('Schema is valid', function(){\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/movies/{{movie_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"movies",
								"{{movie_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlBfVnJpcDNjMl91R093UVluQkp0SSJ9.eyJpc3MiOiJodHRwczovL2hvbGVjc2thLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MDM5NDc0MTc3YzNmMzAwNjk2MmUxOWQiLCJhdWQiOiJjYXBzdG9uZV9pZGVudGlmaWVyIiwiaWF0IjoxNjE1MDU4NzkwLCJleHAiOjE2MTUwNjU5OTAsImF6cCI6InFoREpWNzBzdlZjTm5qUmtIVVV0eHFPRHlGcXoxbFRKIiwic2NvcGUiOiIiLCJwZXJtaXNzaW9ucyI6WyJkZWxldGU6YWN0b3JzIiwiZGVsZXRlOm1vdmllcyIsImdldDplbGVtZW50cyIsInBhaXI6YWN0b3JzX21vdmllcyIsInBhdGNoOmFjdG9ycyIsInBhdGNoOm1vdmllcyIsInBvc3Q6YWN0b3JzIiwicG9zdDptb3ZpZXMiXX0.KhM7u7bYLnzyVgT1Af7d2icxDipcMivQ5kZiG0FDOhjckwFKXBx132JpxvD10MVfEy4MPZyWv0IcRRhln46QpCmeKLzHJTiEltj1Ms9kxQWaBoDbSmjvhy5AfyL0O-GguLG7bva6n029n7sD9Nv7Cd6LncVhuCkBnLJ3AbMxNZGHtRDHnRIfo9Smz31nvjFCirQgSdqmlWHImII312SACQi6Ps8LhZH0u1NlNOFBnmanFKAyYhNW_ihRj8JPXEVa2ycf9IROuiRGOEie_EpSjsLaLeZL3WIME5EbaCxYmekJoicrdWoYajiMYuQnDwf7U5Raa9F0mP8FPjWBvhv_0A",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost:5000"
		},
		{
			"key": "actor_id",
			"value": ""
		},
		{
			"key": "movie_id",
			"value": ""
		}
	]
}